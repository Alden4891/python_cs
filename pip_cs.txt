# ------------------------------
# 1. Installing Pip
# ------------------------------

# Ensure pip is installed:
# Pip is bundled with Python 3.4+.
python -m ensurepip --upgrade

# Check pip version:
pip --version

# Upgrade pip to the latest version:
pip install --upgrade pip

# ------------------------------
# 2. Installing Packages
# ------------------------------

# Install a package:
# Syntax: pip install package_name
pip install requests

# Install a specific version of a package:
# Syntax: pip install package_name==version
pip install numpy==1.19.5

# Install a package from a requirements file:
# Syntax: pip install -r requirements.txt
pip install -r requirements.txt

# Install a package for a specific Python interpreter:
# Syntax: python -m pip install package_name
python3 -m pip install pandas

# Install multiple packages at once:
pip install numpy pandas matplotlib

# Install from a Git repository:
# Syntax: pip install git+https://github.com/username/repo_name.git
pip install git+https://github.com/psf/requests.git

# Install a package in editable mode (useful for development):
# Syntax: pip install -e path_to_package
pip install -e .

# ------------------------------
# 3. Uninstalling Packages
# ------------------------------

# Uninstall a package:
# Syntax: pip uninstall package_name
pip uninstall requests

# Uninstall multiple packages:
pip uninstall numpy pandas

# ------------------------------
# 4. Listing and Checking Installed Packages
# ------------------------------

# List all installed packages:
pip list

# Show details about a specific package:
# Syntax: pip show package_name
pip show numpy

# List outdated packages:
pip list --outdated

# Check for installed package's dependencies:
pip show --requires numpy

# List all installed packages and versions in a requirements format:
pip freeze

# ------------------------------
# 5. Upgrading Packages
# ------------------------------

# Upgrade a package:
# Syntax: pip install --upgrade package_name
pip install --upgrade pandas

# Upgrade all outdated packages:
# Use a loop with pip list --outdated and pip install --upgrade
pip list --outdated | cut -d ' ' -f1 | xargs pip install --upgrade

# ------------------------------
# 6. Working with Requirements Files
# ------------------------------

# Save installed packages to a requirements file:
# Syntax: pip freeze > requirements.txt
pip freeze > requirements.txt

# Install packages from a requirements file:
pip install -r requirements.txt

# ------------------------------
# 7. Using Virtual Environments with Pip
# ------------------------------

# Create a virtual environment:
# Syntax: python -m venv venv_name
python -m venv myenv

# Activate a virtual environment:
# Windows:
.\myenv\Scripts\activate

# macOS/Linux:
source myenv/bin/activate

# Install packages in the active virtual environment:
pip install flask

# Deactivate the virtual environment:
deactivate

# ------------------------------
# 8. Installing from Other Sources
# ------------------------------

# Install from a local directory or wheel file:
# Syntax: pip install path_to_wheel_or_directory
pip install ./path/to/package.whl

# Install from a local archive (tar, zip):
# Syntax: pip install /path/to/package.tar.gz
pip install ./package.tar.gz

# Install a package from a URL:
# Syntax: pip install http://example.com/package.tar.gz
pip install http://example.com/mypackage.tar.gz

# ------------------------------
# 9. Caching and Troubleshooting
# ------------------------------

# Clear pip cache:
# Syntax: pip cache purge
pip cache purge

# Check pip configuration:
pip config list

# View pip cache:
pip cache dir

# Fix package conflicts (e.g., caused by multiple versions):
# Use the pip check command to diagnose conflicts.
pip check

# ------------------------------
# 10. Installing Pip for Specific Python Versions
# ------------------------------

# If you have multiple Python versions installed, specify the Python interpreter:
python3 -m pip install package_name

# For Python 2.x:
python2 -m pip install package_name

# ------------------------------
# 11. Setting Pip Index URLs (Custom Package Repositories)
# ------------------------------

# Install from a custom package index (e.g., for internal repositories):
# Syntax: pip install --index-url https://custom_index_url package_name
pip install --index-url https://mypackages.com/simple package_name

# Install from an extra index URL:
pip install --extra-index-url https://mypackages.com/simple package_name

# ------------------------------
# 12. Using Constraints Files
# ------------------------------

# Specify exact versions of dependencies using a constraints file:
# Syntax: pip install -c constraints.txt
pip install -r requirements.txt -c constraints.txt

# Example constraints file (constraints.txt):
# numpy==1.19.5
# pandas>=1.0.0

# ------------------------------
# 13. Example: Creating and Managing a Project Environment
# ------------------------------

# Step 1: Create a virtual environment
python -m venv project_env

# Step 2: Activate the virtual environment
# Windows: .\project_env\Scripts\activate
# macOS/Linux: source project_env/bin/activate

# Step 3: Install necessary packages
pip install requests flask

# Step 4: Freeze the installed packages to requirements.txt
pip freeze > requirements.txt

# Step 5: Deactivate the environment when finished
deactivate
